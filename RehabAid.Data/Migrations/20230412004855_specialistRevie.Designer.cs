// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RehabAid.Data;

namespace RehabAid.Data.Migrations
{
    [DbContext(typeof(RehabAidContext))]
    [Migration("20230412004855_specialistRevie")]
    partial class specialistRevie
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RehabAid.Data.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Container")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Extension")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NotesJson")
                        .HasColumnType("text");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UniqueId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("RehabAid.Data.Guardians", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Email")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<Guid?>("FacilityId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<int?>("Relationship")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("PatientId");

                    b.ToTable("Guardians");
                });

            modelBuilder.Entity("RehabAid.Data.MedicineLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DateIssued")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PrescriptionLabel")
                        .IsRequired()
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicineLog");
                });

            modelBuilder.Entity("RehabAid.Data.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("EmergencyContact")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<Guid?>("FacilityId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int>("GenderId")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("RehabAid.Data.PatientAttentance", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SpecialistId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("SpecialistId");

                    b.ToTable("PatientAttentance ");
                });

            modelBuilder.Entity("RehabAid.Data.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("Description ")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Email")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("''::text");

                    b.Property<Guid?>("FacilityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GuardianId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(64)")
                        .HasDefaultValueSql("''::character varying")
                        .HasMaxLength(64);

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("GuardianId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("RehabAid.Data.Specialist", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Dob")
                        .HasColumnName("DOB")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<int?>("SpecialtyId")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Specialist");
                });

            modelBuilder.Entity("RehabAid.Data.SpecialistAppointment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SpecialistId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("SpecialistAppointment");
                });

            modelBuilder.Entity("RehabAid.Data.SpecialistReview", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int?>("AgeOfPatientId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Review")
                        .HasColumnType("text");

                    b.Property<int?>("SentimentId")
                        .HasColumnType("integer");

                    b.Property<Guid>("SpecialistId")
                        .HasColumnType("uuid");

                    b.Property<int?>("TimeOfSessionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("SpecialistId");

                    b.ToTable("SpecialistReview");
                });

            modelBuilder.Entity("RehabAid.Data.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Dob")
                        .HasColumnName("DOB")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("RehabAid.Data.TreatmentFacility", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentJson")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnName("CreatorId ")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<Guid?>("LogoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int?>("ProgramId")
                        .HasColumnType("integer");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LogoId");

                    b.ToTable("TreatmentFacility");
                });

            modelBuilder.Entity("RehabAid.Data.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ActivationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AuthRecoveryCodes")
                        .HasColumnType("character varying(512)")
                        .HasMaxLength(512);

                    b.Property<string>("AuthenticatorKey")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMobileConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LockoutExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LoginId")
                        .IsRequired()
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<string>("Mobile")
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<Guid?>("SpecialistId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uuid");

                    b.Property<bool>("TwoFactorAuthEnabled")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("SpecialistId");

                    b.HasIndex("StaffId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("RehabAid.Data.Attachment", b =>
                {
                    b.HasOne("RehabAid.Data.User", "Creator")
                        .WithMany("Attachment")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("Attachment_CreatorId_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("RehabAid.Data.Guardians", b =>
                {
                    b.HasOne("RehabAid.Data.TreatmentFacility", "Facility")
                        .WithMany("Guardians")
                        .HasForeignKey("FacilityId")
                        .HasConstraintName("FacilityId");

                    b.HasOne("RehabAid.Data.Patient", "Patient")
                        .WithMany("Guardians")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("PatientId");
                });

            modelBuilder.Entity("RehabAid.Data.MedicineLog", b =>
                {
                    b.HasOne("RehabAid.Data.User", "Creator")
                        .WithMany("MedicineLog")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("CreatorId");

                    b.HasOne("RehabAid.Data.Patient", "Patient")
                        .WithMany("MedicineLog")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("PatientId");
                });

            modelBuilder.Entity("RehabAid.Data.Patient", b =>
                {
                    b.HasOne("RehabAid.Data.TreatmentFacility", "Facility")
                        .WithMany("Patient")
                        .HasForeignKey("FacilityId")
                        .HasConstraintName("FacilityId");
                });

            modelBuilder.Entity("RehabAid.Data.PatientAttentance", b =>
                {
                    b.HasOne("RehabAid.Data.User", "Creator")
                        .WithMany("PatientAttentance")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("CreatorId")
                        .IsRequired();

                    b.HasOne("RehabAid.Data.Patient", "Patient")
                        .WithMany("PatientAttentance")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("PatientId");

                    b.HasOne("RehabAid.Data.Specialist", "Specialist")
                        .WithMany("PatientAttentance")
                        .HasForeignKey("SpecialistId")
                        .HasConstraintName("SpecialistId");
                });

            modelBuilder.Entity("RehabAid.Data.Reservation", b =>
                {
                    b.HasOne("RehabAid.Data.User", "Creator")
                        .WithMany("Reservation")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("UserId");

                    b.HasOne("RehabAid.Data.Guardians", "Guardian")
                        .WithMany("Reservation")
                        .HasForeignKey("GuardianId")
                        .HasConstraintName("GuardianId");
                });

            modelBuilder.Entity("RehabAid.Data.Specialist", b =>
                {
                    b.HasOne("RehabAid.Data.User", "Creator")
                        .WithMany("Specialist")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("CreatorId")
                        .IsRequired();
                });

            modelBuilder.Entity("RehabAid.Data.SpecialistAppointment", b =>
                {
                    b.HasOne("RehabAid.Data.User", "Creator")
                        .WithMany("SpecialistAppointment")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("CreatorId")
                        .IsRequired();
                });

            modelBuilder.Entity("RehabAid.Data.SpecialistReview", b =>
                {
                    b.HasOne("RehabAid.Data.User", "Creator")
                        .WithMany("SpecialistReview")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("CreatorId");

                    b.HasOne("RehabAid.Data.Patient", "Patient")
                        .WithMany("SpecialistReview")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("PatientId")
                        .IsRequired();

                    b.HasOne("RehabAid.Data.Specialist", "Specialist")
                        .WithMany("SpecialistReview")
                        .HasForeignKey("SpecialistId")
                        .HasConstraintName("SpecialistId")
                        .IsRequired();
                });

            modelBuilder.Entity("RehabAid.Data.Staff", b =>
                {
                    b.HasOne("RehabAid.Data.User", "Creator")
                        .WithMany("Staff")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("CreatorId");
                });

            modelBuilder.Entity("RehabAid.Data.TreatmentFacility", b =>
                {
                    b.HasOne("RehabAid.Data.User", "Creator")
                        .WithMany("TreatmentFacility")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("CreatorId")
                        .IsRequired();

                    b.HasOne("RehabAid.Data.Attachment", "Logo")
                        .WithMany("TreatmentFacility")
                        .HasForeignKey("LogoId")
                        .HasConstraintName("LogoId");
                });

            modelBuilder.Entity("RehabAid.Data.User", b =>
                {
                    b.HasOne("RehabAid.Data.Patient", "Patient")
                        .WithMany("User")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("PatientId");

                    b.HasOne("RehabAid.Data.Specialist", "SpecialistNavigation")
                        .WithMany("User")
                        .HasForeignKey("SpecialistId")
                        .HasConstraintName("SpecialistId");

                    b.HasOne("RehabAid.Data.Staff", "StaffNavigation")
                        .WithMany("User")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("StaffId");
                });
#pragma warning restore 612, 618
        }
    }
}
